<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">

    <!-- 定义 User 的 resultMap，包括 Role 和 authority 列表 -->
    <resultMap id="UserResultMap" type="com.example.model.User">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="phone" column="phone" />
        <result property="address" column="address" />
        <association property="role" javaType="com.example.model.Role">
            <id property="id" column="role_id" />
            <result property="role" column="role_name" />
            <result property="description" column="role_description" />
            <collection property="authority" ofType="com.example.model.Authority">
                <id property="id" column="authority_id" />
                <result property="name" column="authority_name" />
                <result property="description" column="authority_description" />
            </collection>
        </association>
    </resultMap>

    <!-- 查询所有 User 及其 Role 和 authority -->
    <select id="selectAll" resultMap="UserResultMap">
        SELECT u.id, u.name, u.email, u.password, u.phone, u.address,
            r.id AS role_id, r.role AS role_name, r.description AS role_description,
            a.id AS authority_id, a.name AS authority_name, a.description AS authority_description
        FROM user u
        LEFT JOIN role r ON u.role_id = r.id
        LEFT JOIN role_authority ra ON r.id = ra.role_id
        LEFT JOIN authority a ON ra.authority_id = a.id
        WHERE u.delete_flag = '0'
    </select>


    <!-- 根据 ID 查询 User 及其 Role 和 authority -->
    <select id="selectById" resultMap="UserResultMap">
        SELECT u.id, u.name, u.email, u.password, u.phone, u.address,
               r.id AS role_id, r.role AS role_name, r.description AS role_description,
               a.id AS authority_id, a.name AS authority_name, a.description AS authority_description
        FROM user u
        LEFT JOIN role r ON u.role_id = r.id
        LEFT JOIN role_authority ra ON r.id = ra.role_id
        LEFT JOIN authority a ON ra.authority_id = a.id
        WHERE u.id = #{id} AND u.delete_flag = '0'
    </select>

    <!-- 根据 Email 查询 User 及其 Role 和 authority -->
    <select id="selectByEmail" parameterType="String" resultMap="UserResultMap">
        SELECT u.id, u.name, u.email, u.password, u.phone, u.address,
               r.id AS role_id, r.role AS role_name, r.description AS role_description,
               a.id AS authority_id, a.name AS authority_name, a.description AS authority_description
        FROM user u
        LEFT JOIN role r ON u.role_id = r.id
        LEFT JOIN role_authority ra ON r.id = ra.role_id
        LEFT JOIN authority a ON ra.authority_id = a.id
        WHERE u.email = #{email} AND u.delete_flag = '0'
    </select>

    <!-- 根据 Role ID 查询 User 列表 -->
    <select id="selectByRoleId" parameterType="String" resultMap="UserResultMap">
        SELECT u.id, u.name, u.email, u.password, u.phone, u.address,
               r.id AS role_id, r.role AS role_name, r.description AS role_description,
               a.id AS authority_id, a.name AS authority_name, a.description AS authority_description
        FROM user u
        LEFT JOIN role r ON u.role_id = r.id
        LEFT JOIN role_authority ra ON r.id = ra.role_id
        LEFT JOIN authority a ON ra.authority_id = a.id
        WHERE r.id = #{roleId} AND u.delete_flag = '0'
    </select>

    <!-- 插入 User -->
    <insert id="insert" parameterType="com.example.model.User">
        INSERT INTO user (id, name, email, password, phone, address, role_id, delete_flag, create_date, update_date)
        VALUES (#{id}, #{name}, #{email}, #{password}, #{phone}, #{address}, #{role.id}, '0', NOW(), NOW())
    </insert>

    <!-- 更新 User -->
    <update id="update" parameterType="com.example.model.User">
        UPDATE user
        SET name = #{name}, email = #{email}, password = #{password}, 
            phone = #{phone}, address = #{address}, role_id = #{role.id}, 
            update_date = NOW()
        WHERE id = #{id} AND delete_flag = '0'
    </update>

    <!-- 假删除 User -->
    <update id="delete" parameterType="String">
        UPDATE user
        SET delete_flag = '1',
        update_date = NOW()
        WHERE id = #{id} AND delete_flag = '0'
    </update>

    <select id="selectByName" resultMap="UserResultMap">
        SELECT u.id, u.name, u.email, u.password, u.phone, u.address,
            r.id AS role_id, r.role AS role_name, r.description AS role_description,
            a.id AS authority_id, a.name AS authority_name, a.description AS authority_description
        FROM user u
        LEFT JOIN role r ON u.role_id = r.id
        LEFT JOIN role_
        LEFT JOIN authority a ON ra.authority_id = a.id
        WHERE u.name = #{name} AND u.delete_flag = '0'
    </select>
</mapper>
